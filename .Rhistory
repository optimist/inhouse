fromto <- unlist(strsplit(period, "/"))
if(length(fromto) == 1) {
fromto[2] <- Sys.Date()
}
from
fromto[1]
ymd(fromto[1])
ymd(fromto[2])
seq.Date(from = lubridate::ymd(fromto[1]), to = lubridate::ymd(fromto[2]), by = by)
by = 1
date_seq <- function(period, by = 1) {
fromto <- unlist(strsplit(period, "/"))
if(length(fromto) == 1) {
fromto[2] <- Sys.Date()
}
seq.Date(from = lubridate::ymd(fromto[1]), to = lubridate::ymd(fromto[2]), by = by)
}
date_seq("20151231/")
date_seq("20151231")
date_seq("20151231/")
period <- "20151231/"
fromto <- unlist(strsplit(period, "/"))
fromto
length(fromto)
if(length(fromto) == 1) {
fromto[2] <- Sys.Date()
}
fromto
date_seq <- function(period, by = 1) {
fromto <- unlist(strsplit(period, "/"))
if(length(fromto) == 1) {
fromto[2] <- as.character(Sys.Date())
}
seq.Date(from = lubridate::ymd(fromto[1]), to = lubridate::ymd(fromto[2]), by = by)
}
date_seq("20151231/")
date_seq("20151231/20160201")
remove.packages("inhouse")
devtools::install(inhouse)
devtools::install()
devtools::document(inhouse)
devtools::install(inhouse)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
fecha <- date_seq("20161231/")
fecha
library(inhouse)
fecha <- date_seq("20161231/")
fecha
id = c("1ispy_", "1ishv_")
conn_mercados <- dbConnect(
drv=RMySQL::MySQL(),
host="portafolio.c07ss4f9aoi8.us-east-1.rds.amazonaws.com",
username="cism", password="cism", port=3306, dbname="mercados")
query <- paste("SELECT fecha, id, precio FROM precios WHERE fecha IN ('", paste(fecha, collapse = "','"), "')")
query
!is.null(id)
query <- paste0(query, " AND id IN ('", paste(id, collapse="','"), "')")
query
library(RMySQL)
library(dplyr)
con <- dbConnect(
drv=RMySQL::MySQL(),
host="portafolio.c07ss4f9aoi8.us-east-1.rds.amazonaws.com",
username="cism", password="cism", port=3306, dbname="mercados")
query <- paste("SELECT fecha, id, precio FROM precios WHERE fecha IN ('", paste(fecha, collapse = "','"), "')")
query
if (!is.null(id)) {
query <- paste0(query, " AND id IN ('", paste(id, collapse="','"), "')")
}
prices <- DBI::dbGetQuery(con, query)
con <- dbConnect(
drv=RMySQL::MySQL(),
host="portafolio.c07ss4f9aoi8.us-east-1.rds.amazonaws.com",
username="cism", password="cism", port=3306, dbname="precios")
prices <- DBI::dbGetQuery(con, query)
prices
prices %>%
#as date
mutate(fecha = as.Date(fecha)) %>%
#repo
tidyr::spread(id, precio)
rm(list = ls())
library(inhouse)
devtools::document()
library(inhouse)
devtools::document()
devtools::install()
rm(list=ls())
devtools::document()
devtools::document()
install.packages("tidyr")
library(tidyr)
devtools::document()
devtools::install()
inhouse::price_ids()
rm(list=ls())
devtools::document()
devtools::install()
library(inhouse)
price_ids()
price_ids("2016-01-10")
rm(list=ls())
devtools::document()
devtools::install()
list <- price_ids("2016-01-10")
list
list
list <- price_ids("2017-01-10")
list
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(inhouse)
get_position("2017-01-11")
get_prices(date_seq("20161231/"), "1ispy_")
postition <- inhouse::get_position("2017-02-13")
position <- postition
citation()
dd
rm(list=ls())
get_position <- function(fecha, contrato = NULL){
con <- DBI::dbConnect(RMySQL::MySQL(), host='CISM21', username="cism", password="cism", dbname="portafolio")
query <- paste("select ",
"fecha, carteramodelo, contrato, tot, reporto, tipo, emisora, serie, precio, tit, mon ",
"from posiciones where ",
"fecha in ('",
paste(lubridate::ymd(fecha), collapse = "','"),
"') ",
sep="")
if(!is.null(contrato)) {
query <- paste(query,
"and contrato in ('",
paste(contrato, collapse ="','"),
"') ",
sep="")
}
pos <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
pos <- pos %>%
#as date
mutate(fecha = as.Date(fecha)) %>%
#repo
mutate(tipo = replace(tipo, reporto == "R", "")) %>%
mutate(emisora = replace(emisora, reporto == "R", "REPORTO")) %>%
mutate(serie = replace(serie, reporto == "R", "")) %>%
mutate(precio = replace(precio, reporto == "R", 1)) %>%
mutate(tit = replace(tit, reporto == "R", 0)) %>%
#id
mutate(id = asset_id(tipo, emisora, serie)) %>%
#group
group_by(fecha, carteramodelo, contrato, tot, id, reporto, tipo, emisora, serie, precio) %>%
summarise(tit = sum(tit), mon = sum(mon)) %>%
mutate(perc = mon/tot) %>%
as.data.frame()
pos$tit[pos$emisora=="EFECTIVO"] <- pos$mon[pos$emisora=="EFECTIVO"] # causaba incorrecta suma del total de valuacion
pos$tit[pos$emisora=="REPORTO"] <- pos$mon[pos$emisora=="REPORTO"] # causaba incorrecta suma del total de valuacion
pos[pos$tit != 0, ]
}
position <- get_position("20170216")
library(dplyr)
position <- get_position("20170216")
library(inhouse)
position <- inhouse::get_position("20170216")
groups = c("fecha", "emisora")
position <- position %>%
group_by_(.dots = lapply(paste0("~", groups), as.formula))
position
position %>%
tidyr::complete(tidyr::nesting(contrato, tot),
tidyr:: nesting(id, reporto, tipo, emisora, serie),
fill = list(tit=0, mon = 0)) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
position <- inhouse::get_position("20170216")
position <- position %>%
tidyr::complete(
tidyr::nesting(contrato, tot),
tidyr:: nesting(id, reporto, tipo, emisora, serie),
fill = list(tit=0, mon = 0)
)
head(position, 20)
!is.null(groups)
position <- position %>%
group_by_(.dots = lapply(paste0("~", groups), as.formula))
head(position, 20)
rm(list=ls())
library(inhouse)
position <- get_position("20170216")
summarize_position(position, groups = "emisora", med = median(mon))
summarize_position(position, groups = c("fehca", "emisora"), med = median(mon))
summarize_position(position, groups = c("fecha", "emisora"), med = median(mon))
head(position)
tail(position)
haad(position, 100)
head(position, 100)
position[is.na(position$fecha)]
position <- position %>%
tidyr::complete(
tidyr::nesting(contrato, tot),
tidyr:: nesting(id, reporto, tipo, emisora, serie),
fill = list(tit=0, mon = 0)
)
head(position, 50)
position <- get_position("20170216")
position <- position %>%
tidyr::complete(
tidyr::nesting(fecha, contrato, tot),
tidyr:: nesting(id, reporto, tipo, emisora, serie),
fill = list(tit=0, mon = 0)
)
position
library(inhouse)
position <- inhouse::get_position("20170216")
summarize_position(position, groups = c("fecha", "emisora"), median = median(mon))
summarize_position(position, groups = c("fecha", "emisora"), median = mean(mon))
summarize_position(position, groups = c("fecha", "carteramodelo", "emisora"), median = mean(mon))
summarize_position(position, groups = c("carteramodelo", "emisora"), median = mean(mon))
library(inhouse)
con <- DBI::dbConnect(
drv=RMySQL::MySQL(),
host="portafolio.c07ss4f9aoi8.us-east-1.rds.amazonaws.com",
username="cism", password="cism", port=3306, dbname="mercados")
col_names <- paste("priceid as id, tipovalor, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_de_revision, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
col_names
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_de_revision, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_de_revision, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
query <- paste(sprintf("SELECT %s FROM valores", col_names))""
query <- paste(sprintf("SELECT %s FROM valores", col_names))
query
valores <- DBI::dbGetQuery(con, query)
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_revision_dias, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
query <- paste(sprintf("SELECT %s FROM valores", col_names))
valores <- DBI::dbGetQuery(con, query)
valores
id <- c("i1shv_", "1ispy_")
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_revision_dias, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
query <- paste(sprintf("SELECT %s FROM valores", col_names))
if (!is.null(id)) {
query <- paste0(query, " AND priceid IN ('", paste(id, collapse="','"), "')")
}
valores <- DBI::dbGetQuery(con, query) %>%
DBI::dbDisconnect(con)
DBI::dbGetQuery(con, query)
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_revision_dias, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
query <- paste(sprintf("SELECT %s FROM valores", col_names))
if (!is.null(id)) {
query <- paste0(query, " WHERE priceid IN ('", paste(id, collapse="','"), "')")
}
DBI::dbGetQuery(con, query)
id
valores <- DBI::dbGetQuery(con, query) %>%
mutate(vencimiento = as.Date(vencimiento)) %>%
mutate(last_update = as.Date(last_update)) %>%
filter(id %in% price_ids())
library(dplyr)
valores <- DBI::dbGetQuery(con, query) %>%
mutate(vencimiento = as.Date(vencimiento)) %>%
mutate(last_update = as.Date(last_update)) %>%
filter(id %in% price_ids())
valores <- DBI::dbGetQuery(con, query) %>%
mutate(vencimiento = as.Date(vencimiento)) %>%
mutate(last_update = as.Date(last_update)) %>%
filter(id %in% inhouse::price_ids())
id <- NULL
col_names <- paste("priceid as id, tipovalor as tipo, emisora, serie, vencimiento, moneda",
"periodicidad_de_pago_dias, flotante, ",
"periodicidad_revision_dias, emisor, tasa_de_cupon",
"valor_nominal, preciohoy as last_price, fechahoy as last_update")
query <- paste(sprintf("SELECT %s FROM valores", col_names))
if (!is.null(id)) {
query <- paste0(query, " WHERE priceid IN ('", paste(id, collapse="','"), "')")
}
valores <- DBI::dbGetQuery(con, query) %>%
mutate(vencimiento = as.Date(vencimiento)) %>%
mutate(last_update = as.Date(last_update))
DBI::dbGetQuery(con, query) %>%
mutate(vencimiento = as.Date(vencimiento)) %>%
mutate(last_update = as.Date(last_update)) %>%
filter(id %in% inhouse::price_ids())
library(inhouse)
devtools::document()
devtools::install()
devtools::install()
devtools::install()
x <- c("SPY", "SHV")
prices <- x %>% tidyquant::tq_get(get = "stock.prices", ...)
prices <- x %>% tidyquant::tq_get(get = "stock.prices")
prices
type="close"
prices <- x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("symbol.x", type))
prices
x %>% tidyquant::tq_get(get = "stock.prices")
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
spread(symbol.x, -date)
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, -date)
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type))
?tidyr::spread
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close, -date)
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close)
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
as.xts(.[ ,-1], .[ ,1])
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
xts::xts(.[ ,-1], .[ ,1])
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
as.data.frame(check.names = FALSE)
x <- c("MXN=X")
x %>% tidyquant::tq_get(get = "stock.prices") %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
as.data.frame(check.names = FALSE)
x %>% tidyquant::tq_get(get = "stock.prices")
devtools::document()
devtools::install()
devtools::document()
devtools::document()
installed.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
devtools::document()
devtools::install()
?inhouse::tq_get_wide
?inhouse::tq_get_wide
devtools::document()
devtools::install()
?inhouse::tq_get_wide
library(inhouse)
?inhouse::tq_get_wide
tq_get_wide(c("SPY", "SHV"))
tq_get_wide <- function(x, type="close", ...) {
if (!(type %in% c("open", "close", "high", "low", "volume", "adjusted"))) {
stop('type must be one of "open", "close", "high", "low", "volume", "adjusted"')
}
if (length(x) == 0 | !is.character(x)) {
stop('x must be a character vector of length greater than 1')
}
price <- x %>%
tidyquant::tq_get(get = "stock.prices", ...)
if (length(x) > 1) {
price <- price %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
as.data.frame(check.names = FALSE)
} else {
price <- price %>%
select_(.dots = c("date", type)) %>%
as.data.frame(check.names = FALSE)
}
price
}
tq_get_wide(c("SPY", "SHV"))
library(dplyr)
tq_get_wide <- function(x, type="close", ...) {
if (!(type %in% c("open", "close", "high", "low", "volume", "adjusted"))) {
stop('type must be one of "open", "close", "high", "low", "volume", "adjusted"')
}
if (length(x) == 0 | !is.character(x)) {
stop('x must be a character vector of length greater than 1')
}
price <- x %>%
tidyquant::tq_get(get = "stock.prices", ...)
print(head(price))
if (length(x) > 1) {
price <- price %>%
select_(.dots = c("date", "symbol.x", type)) %>%
tidyr::spread(symbol.x, close) %>%
as.data.frame(check.names = FALSE)
} else {
price <- price %>%
select_(.dots = c("date", type)) %>%
as.data.frame(check.names = FALSE)
}
price
}
tq_get_wide(c("SPY", "SHV"))
devtools::document()
devtools::install()
tt <- tq_get(c("SPY", "SHV"), get = "stock.prices")
tt <- tidyquant::tq_get(c("SPY", "SHV"), get = "stock.prices")
class(tt)
tt
help(package = "tibble")
devtools::document()
devtools::install()
?inhouse::tq_spread
tidyquant::tq_get(c("SPY", "SHV")) %>% inhouse::tq_spread()
devtools::install()
tidyquant::tq_get(c("SPY", "SHV")) %>% inhouse::tq_spread()
devtools::install()
tidyquant::tq_get(c("SPY", "SHV")) %>% inhouse::tq_spread()
devtools::install()
tidyquant::tq_get(c("SPY", "SHV")) %>% inhouse::tq_spread()
tq_get_wide(c("SPY", "SHV"), type = "volume", from = "2015-12-31")
inhouse::tq_get_wide(c("SPY", "SHV"), type = "volume", from = "2015-12-31")
devtools::install()
tq_get_wide(c("SPY", "SHV"), type = "volume", from = "2015-12-31")
inhouse::tq_get_wide(c("SPY", "SHV"), type = "volume", from = "2015-12-31")
help(package = "inhouse")
inhouse::tq_get_wide(c("SPY", "SHV", "error", "LALAB", "SHY", "IEF", "IEV", "HEDJ", "FXH", "FXO"), type = "volume", from = "2015-12-31")
inhouse::get_position("2017-03-06") %>% filter(emisora == "NAVIGTR")
library(dplyr)
inhouse::get_position("2017-03-06") %>% filter(emisora == "NAVIGTR")
spl <- function(x, sep =",") {
if (length(x) != 1) stop("x must have length 1")
stringr::str_split(x, pattern = sep, simplify = TRUE)
}
spl <- c("hola ", "tu")
spl
spl <- c("hola , tu")
spl
spl <- function(x, sep =",") {
if (length(x) != 1) stop("x must have length 1")
stringr::str_split(x, pattern = sep, simplify = TRUE)
}
spl("hola , tu")
spl <- function(x, sep =",") {
if (length(x) != 1) stop("x must have length 1")
gsub("[ ]+", "", unlist(stringr::str_split(x, pattern = sep)))
}
spl("hola , tu")
spl("SPY, SHV ")
devtools::document()
devtools::install()
source('C:/Github/inhouse/R/returns.R', echo=TRUE)
devtools::document()
devtools::install()
help(package = "inhouse")
?rollapply
library(dplyr)
library(tidyr)
?tidyr::fill
?fill_
price_fill <- function(df, fill_missing_init = TRUE) {
filled_df <- tidyr::fill_(df, names(df)[-1], .direction = "down")
if (fill_missing_init) {
filled_df <- tidyr::fill_(filled_df, names(filled_df)[-1], .direction = "up")
}
filled_df
}
df <- inhouse::tq_get_wide("SPY,MXN=X")
devtools::install()
library(inhouse)
df <- inhouse::tq_get_wide("SPY,MXN=X")
df
inhouse::spl("SPY,MXN=X")
df <- inhouse::tq_get_wide("SPY,MXN=X")
devtools::install()
library(inhouse)
df <- inhouse::tq_get_wide("SPY,MXN=X")
df
head(price_fill(df))
head(price_fill(df, fill_missing_init = FALSE))
price_fill(df)
head(df, 50)
head(df, 48)
head(price_fill(df), 48)
devtools::document()
devtools::install()
help(package = "inhouse")
document::install()
devtools::install()
?gsub
where <- "Where x in a"
grepl("where", where, ignore.case = TRUE)
gsub("where", "", where, ignore.case = TRUE)
paste("WHERE", where)
devtools::install()
devtools::install()
sprintf("fetching query %s\n", query)
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
inhouse::price_ids()
grep("cetes", inhouse::price_ids(), value = TRUE)

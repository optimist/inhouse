?.
plyr::.
?match.call
?group_by
?rollapply
?apply.zoo
?apply.xts
?xts:::apply.xts
?xts::apply.xts
xts:::rollapply.xts
?xts:::rollapply.xts
?xts::rollapply.xts
?rollapply.xts
?xts::rollapply.xts
?xts:::rollapply.xts
xts:::rollapply.xts
?`coredata<-`
position
tot_df <- position %>%
select(fecha, contrato, tot) %>%
distinct() %>%
tidyr::spread(contrato, tot)
tot_df <- xts::xts(tot_df[ ,-1], order.by = as.Date(tot_df$fecha))
ret_df <- tot_df/xts::lag.xts(tot_df)
tot_df <- position %>%
select(fecha, contrato, tot) %>%
distinct() %>%
tidyr::spread(contrato, tot)
library(dplyr)
tot_df <- position %>%
select(fecha, contrato, tot) %>%
distinct() %>%
tidyr::spread(contrato, tot)
tot_df <- xts::xts(tot_df[ ,-1], order.by = as.Date(tot_df$fecha))
ret_df <- tot_df/xts::lag.xts(tot_df)
ret_df
na_replace
na.replace
?aggregate
aggregate.formula
aggregate.formula
stats::aggregate.formula
stats:::aggregate.formula
summarize_position <- function(position, groups = quote(fecha, carteramodelo, id), ...) {
position %>%
group_by_(groups) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
groups = quote(fecha, carteramodelo, id)
substitue(fecha, carteramodelo, id)
substitue(fecha, carteramodelo, id)
substitute(fecha, carteramodelo, id)
summarize_position <- function(position, groups = substitute(fecha, carteramodelo, id), ...) {
position %>%
group_by_(groups) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
substitute(fecha, carteramodelo, id)
groups = substitute(fecha, carteramodelo, id)
?substitute
quote(fecha, grupo)
expr(fecha, grupo)
expression(fecha, grupo)
groups = expression(fecha, carteramodelo, id)
groups= expression(fecha, carteramodelo, id)
position %>%
group_by(groups)
groups= expression(fecha, carteramodelo, id)
groups
substitute(groups)
eval(groups)
position %>%
group_by(groups)
position %>% group_by(groups)
position %>% group_by(eval(groups))
position %>% group_by(unquote(groups))
position %>% group_by(quote(groups))
position %>% group_by(enquote(groups))
?group_by
group_by
substitute(groups)
deparse(groups)
deparse(eval(groups))
groups
call(groups)
parse(groups)
parse(test = groups)
parse(text = groups)
?parse
deparse(text = groups)
deparse(groups)
deparse(fecha, carteramodelo, id)
?expression
groups
as.call(groups)
deparse(as.call(groups))
groups = deparse(text = "fecha, carteramodelo, id")
groups = parse(text = "fecha, carteramodelo, id")
quote(fecha, carteramodelo, id)
?aggregate
groups = list(fecha, carteramodelo, id)
summarize_position <- function(position, groups = list(fecha, carteramodelo, id), ...) {
if(missing(groups))
position %>%
group_by_(deparse(as.call(groups))) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
lapply(groups, deparse)
vapply(groups, deparse)
sapply(groups, deparse)
deparse("hola")
groups = list(fecha, carteramodelo, id)
summarize_position <- function(position, groups = list(fecha, carteramodelo, id), ...) {
groups = gsub("\"", "", sapply(groups, deparse))
position %>%
group_by_(groups) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
groups = gsub("\"", "", sapply(groups(fecha, carteramodelo, id), deparse))
groups = gsub("\"", "", sapply(list(fecha, carteramodelo, id), deparse))
groups
groups = expression(list(fecha, carteramodelo, id))
groups = gsub("\"", "", sapply(groups, deparse))
groups
groups = expression(list(fecha, carteramodelo, id))
groups
summarize_position <- function(position, groups = expression(list(fecha, carteramodelo, id)), ...) {
groups = gsub("\"", "", lapply(groups, deparse))
print(groups)
position %>%
group_by_(groups) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position)
summarize_position <- function(position, groups = expression(fecha, carteramodelo, id), ...) {
groups = gsub("\"", "", lapply(groups, deparse))
print(groups)
position %>%
group_by_(groups) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position)
summarize_position(position, groups = list(fecha, carteramodelo))
summarize_position(position, groups = expression(fecha, carteramodelo))
?group_by
?group_by_
pp <- position  %>% group_by(fecha, carteramodelo)
pp
groups(pp)
attr(pp)
attributes(pp)
groups(pp)
groups(pp) <- list(substitute(fecha), substitute(carteramodelo), substitute(id))
attr(pp, "groups") <- list(substitute(fecha), substitute(carteramodelo), substitute(id))
pp
groups(pp)
attr(pp, "groups")
attributes(pp)
pp$groups
substitute(fecha)
list(substitute(fecha), substitute(carteramodelo), substitute(id))
group_by
?group_by
groups = expression(fecha, carteramodelo, id)
groups
sapply(groups, . %>% {as.formula(paste0('~', .))})
dots = sapply(groups, . %>% {as.formula(paste0('~', .))})
position %>%
group_by_(groups)
position %>%
group_by_(dots)
dots = unlist(lapply(groups, . %>% {as.formula(paste0('~', .))}))
dots
dots = sapply("hola, tu", . %>% {as.formula(paste0('~', .))})
dots = sapply(c("hola", "tu"), . %>% {as.formula(paste0('~', .))})
dots
class(dots)
position %>%
group_by_(dots)
dots = sapply(groups, . %>% {as.formula(paste0('~', .))})
position %>%
group_by_(.dots = dots)
summarize_position <- function(position, groups = expression(fecha, carteramodelo, id), ...) {
dots = sapply(groups, . %>% {as.formula(paste0('~', .))})
position %>%
group_by_(.dots = dots) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position)
summarize_position(position, groups = list(fecha, carteramodelo))
summarize_position(position, groups = fecha, carteramodelo)
summarize_position(position, groups = ~ fecha, carteramodelo)
summarize_position(position, groups = ~ c(fecha, carteramodelo))
summarize_position(position, groups  ~ c(fecha, carteramodelo))
summarize_position(position, groups = c("fecha", "carteramodelo"))
class(group_by(fecha, carteramodelo))
.(fecha, carteramodelo)
plyr::.(fecha, carteramodelo)
summarize_position <- function(position, groups = c("fecha", "carteramodelo", "id"), ...) {
dots = sapply(groups, function(x) as.formula(paste0('~', x)))
position %>%
group_by_(.dots = dots) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position, groups = c("fecha", "carteramodelo"))
summarize_position(position, groups = c("fecha", "carteramodelo", "id"))
summarize_position <- function(position, groups = c("fecha", "carteramodelo", "id"), ...) {
position %>%
group_by_(.dots = as.formula(paste0("~", groups))) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position, groups = c("fecha", "carteramodelo"))
summarize_position <- function(position, groups = c("fecha", "carteramodelo", "id"), ...) {
position %>%
group_by_(.dots = as.list(as.formula(paste0("~", groups)))) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position, groups = c("fecha", "carteramodelo"))
as.list(as.formula(paste0("~", groups))))
as.list(as.formula(paste0("~", groups)))
paste0("~", groups)
lapply(paste0("~", groups), as.formula)
summarize_position <- function(position, groups = c("fecha", "carteramodelo", "id"), ...) {
position %>%
group_by_(.dots = lapply(paste0("~", groups), as.formula)) %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position, groups = c("fecha", "carteramodelo"))
summarize_position(position, groups = c("fecha", "carteramodelo", "id"))
summarize_position(position, groups = c("fecha", "carteramodelo", "id"), count = length(contrato))
summarize_position <- function(position, groups = c("fecha", "carteramodelo", "id"), ...) {
if (!is.null(groups)) {
position <- position %>% group_by_(.dots = lapply(paste0("~", groups), as.formula))
}
position %>%
summarize(sum_mon = sum(mon), perc_median = median(perc), perc_mean = mean(perc), perc_sd = sd(perc), ...)  %>%
as.data.frame()
}
summarize_position(position, groups = NULL, count = length(contrato))
summarize_position(position  %>%  filter(fecha = "2016-07-28"), groups = NULL, count = length(contrato))
summarize_position(position  %>%  filter(fecha == "2016-07-28"), groups = NULL, count = length(contrato))
position <- get_position(fecha = c("2016-07-28", "2016-07-29"))
position <- get_position(fecha = c("2016-07-28", "2016-07-29"))
remove.packages("optimist")
document()
document()
devtools::document()
install()
devtools::install()
library(dplyr)
library(optimist)
library(optimist)
library(inhouse)
position <- get_position(fecha = c("2016-07-28", "2016-07-29"))
`%>%`
magritr::`%>%`
magritr::`%>%`
magrittr::`%>%`
document()
library(devtools)
document()
install()
document()
library(inhouse)
library(inhouse)
document()
devtools(document)
devtools::document()
devtools::document()
library(inhouse)
library(inhouse)
%>%
`%>%`
position <- get_position(fecha = c("2016-07-28", "2016-07-29"))
summarize_position(position, groups = c("fecha", "carteramodelo", "id"), count = length(contrato))
document()
library(devtools)
document()
document()
install()
library(inhouse)
rm(list = ls())
library(inhouse)
get_position(c("2015-12-31", "2016-01-04", "2016-01-05"), contrato = c("25774", "25773"))
position <- get_position(fecha = c("2016-07-28", "2016-07-29"))
group_by_
summarize_position
summarize_position(position, groups = c("fecha", "carteramodelo", "id"), count = length(contrato))
summarize_position(position, groups = NULL)
test <- function()
test <- function() {0}
test <- function() 0
document()
library(devtools)
install()
document()
document()
install()
document()
install()
document()
devtools::document()
devtools::document()
install()
devtools::install()
map_from_df <- function(x, map_df, missing = NA) {
map <- setNames(map_df[[2]], map_df[[1]])
x_trans <- missing
x_trans[x %in% map_df[[1]]] <- map[x[x %in% map_df[[1]]]]
x_trans
}
?replace
?substitute
?map
#'
#' @export
asset_id <- function(tipo, emisora, serie) {
tipo[nchar(tipo) == 1] <- paste0(tipo[nchar(tipo) == 1], "_")
id <- tolower(paste0(tipo, emisora, serie))
id <- gsub("\\*|\\+|\\-", "_", id)
id
}
#' @title Map a variable
#' @description Sometimes we need to map one vector into another. For inhouse data it can be useful when defining categories for
#' carteras modelo, id's or emisoras. This function maps \code{origin -> target} for every value of x.
#' @param x The vector that will be transformed; x must have values in \code{origin}.
#' @param origin A vector
#' @param target A vector
#' @param replace_missing Indicates whether the values of \code{x} that are not found \code{origin} should be changed.
#' If \code{replace_missing} is given a value other than \code{FALSE} then this value will be used as replacement for the
#' values of \code{x} not found in \code{origin}.
#' @return A transformed vector
#' @export
map <- function(x, origin, target, replace_missing = FALSE) {
map <- setNames(target, origin)
x_trans <- missing
x_trans[x %in% map_df[[1]]] <- map[x[x %in% map_df[[1]]]]
x_trans
}
?all.equal
isTRUE
map <- function(x, origin, target, replace_missing = FALSE) {
map <- setNames(target, origin)
x_trans <- missing
x_trans[x %in% map_df[[1]]] <- map[x[x %in% map_df[[1]]]]
x_trans
}
map(1:6, 2, 4)
map <- function(x, origin, target, replace_missing = FALSE) {
map <- setNames(target, origin)
x_trans <- missing
x_trans[x %in% origin] <- map[x[x %in% origin]]
x_trans
}
map(1:6, 2, 4)
origin <-2
target <- 4
map <- setNames(target, origin)
map
x <- 1:6
matching <- match(x, origin)
matching
map <- function(x, origin, target, replace_missing = FALSE) {
if (length(origin) != length(target)) stop("origin and target must have the same length")
matching <- match(x, origin)
x_new <- x
x_new[!is.na(matching)] <- target[!is.na(matching)]
if (!isFALSE(replace_missing)) {
x_new[is.na(matching)] <- replace_missing
}
x_new
}
map(1:6, 2, 4)
map <- function(x, origin, target, replace_missing = FALSE) {
if (length(origin) != length(target)) stop("origin and target must have the same length")
matching <- match(x, origin)
x_new <- x
x_new[!is.na(matching)] <- target[!is.na(matching)]
if (!identical(replace_missing, FALSE)) {
x_new[is.na(matching)] <- replace_missing
}
x_new
}
map(1:6, 2, 4)
ORIGIN
origin
target
x
if (length(origin) != length(target)) stop("origin and target must have the same length")
matching <- match(x, origin)
matching
x_new <- x
x_new
!is.na(matching)
x_new[!is.na(matching)]
target[!is.na(matching)]
target
!is.na(matching)
x_new[which(!is.na(matching))]
target[which(!is.na(matching))]
which(!is.na(matching))
target
target[matching(which(!is.na(matching)))]
matching <- match(x, origin)
matching
matching[which(!is.na(matching))]
target[matching[which(!is.na(matching))]]
x_new[!is.na(matching)] <- target[matching[which(!is.na(matching))]]
x_new
map <- function(x, origin, target, replace_missing = FALSE) {
if (length(origin) != length(target)) stop("origin and target must have the same length")
matching <- match(x, origin)
x_new <- x
x_new[!is.na(matching)] <- target[matching[which(!is.na(matching))]]
if (!identical(replace_missing, FALSE)) {
x_new[is.na(matching)] <- replace_missing
}
x_new
}
map(1:6, c(2,3), c(-1, -2))
map(1:6, c(2,3), c(-1, -2), replace_missing = NA)
map(1:6, c(2,3), c(-1, -2), replace_missing = "NO ENCONTRADOS")
map(1:6, c(2,3), c(-1, -2), replace_missing = NA)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
rm(list= ls())
help(package = "inhouse")
as.Date(as.Date("2015-12-31"):as.Date("2016-11-23"))
as.Date(as.numeric(as.Date("2015-12-31")):as.numeric(as.Date("2016-11-23")))
posiciones <- seq(as.Date("2015-12-31"), as.Date("2016-11-23"))
seq(as.Date("2015-12-31"), as.Date("2016-11-23"), by = 1)
posiciones <- get_posiciones(seq(as.Date("2015-12-31"), as.Date("2016-11-23"), by = 1))
posiciones <- get_positions(seq(as.Date("2015-12-31"), as.Date("2016-11-23"), by = 1))
posiciones <- inhouse::get_position(seq(as.Date("2015-12-31"), as.Date("2016-11-23"), by = 1))
devtools(position, posiciones)
devtools::use_date(position, posiciones)
scales::comma(object.size(posicones)/1000)
scales::comma(object.size(posiciones)/1000)
scales::comma(as.numeric(object.size(posiciones))/1000)
pp <- posiciones  %>% filter(fecha <= as.Date("2016-01-31"))
pp <- posiciones  magrittr::`%>%` filter(fecha <= as.Date("2016-01-31"))
library(magrittr)
pp <- posiciones  %>% filter(fecha <= as.Date("2016-01-31"))
library(dplyr)
pp <- posiciones  %>% filter(fecha <= as.Date("2016-01-31"))
pp
as.numeric(object.size(pp))/1000000
position_january <- pp
devtools::use_data(position)
devtools::use_data(position_january)
get_carteramodelo <- function(fecha, contrato = NULL){
con <- DBI::dbConnect(RMySQL::MySQL(), host='CISM21', username="cism", password="cism", dbname="portafolio")
query <- paste("select * from posiciones where ",
"fecha in ('",
paste(fecha, collapse = "','"),
"') ",
sep="")
cm <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
cm <- cm %>%
as.data.frame()
cm
}
carteramodelo_january <- get_carteramodelo(seq(as.Date("2015-12-31"), as.Date("2016-01-31"), by = 1))
object.size(carteramodelo_january)/1000000
head(carteramodelo_january)
get_carteramodelo <- function(fecha, contrato = NULL){
con <- DBI::dbConnect(RMySQL::MySQL(), host='CISM21', username="cism", password="cism", dbname="portafolio")
query <- paste("select * from carteramodelo where ",
"fecha in ('",
paste(fecha, collapse = "','"),
"') ",
sep="")
cm <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
cm <- cm %>%
as.data.frame()
cm
}
carteramodelo_january <- get_carteramodelo(seq(as.Date("2015-12-31"), as.Date("2016-01-31"), by = 1))
object.size(carteramodelo_january)/1000000
carteramodelo_january
head(carteramodelo_january)
gsub("[^/]+", "\\1", "1I/ACWX/*")
gsub("[^/]+", "\\2", "1I/ACWX/*")
gsub("[^.]+", "\\2", "1I/ACWX/*")
gsub("[^.]+", "\\1", "1I/ACWX/*")
gsub("[^.S]+", "\\1", "1I/ACWX/*")
gsub("[^S]+", "\\1", "1I/ACWX/*")
gsub("[S]+", "\\1", "1I/ACWX/*")
gsub("[/]+", "\\1", "1I/ACWX/*")
strsplit("1I/ACWX/*", "/")[[1]]
strsplit(c("1I/ACWX/*","1I/ACWI/*"), "/")
as.data.frame(strsplit(c("1I/ACWX/*","1I/ACWI/*"), "/"))
as.data.frame(strsplit(c("1I/ACWX/*","1I/ACWI/*"), "/"))[1, ]
as.character(as.data.frame(strsplit(c("1I/ACWX/*","1I/ACWI/*"), "/"))[1, ])
sapply(strsplit(c("1I/ACWX/*","1I/ACWI/*"), "/"), function(x) x[[1]])
fecha <- seq(as.Date("2015-12-31"), as.Date("2016-01-31")
)
